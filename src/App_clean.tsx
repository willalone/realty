import React, { useMemo, useState } from 'react';

type ModalId = 'consult' | 'callback' | 'booking' | 'promo1' | 'promo2' | 'promo3' | 'singlepay' | 'family' | 'state';                                                                                                  

function useModal() {
  const [open, setOpen] = useState<ModalId | null>(null);
  const openModal = (id: ModalId) => setOpen(id);
  const close = () => setOpen(null);
  return { open, openModal, close };
}

function Toast({ message }: { message: string }) {
  if (!message) return null;
  return <div className="toast" role="status" aria-live="polite">{message}</div>;
}

function CheckboxConsent() {
  return (
    <label className="checkbox">
      <input type="checkbox" name="consent" required />
      <span>–°–æ–≥–ª–∞—Å–µ–Ω —Å <a href="/policy.html" target="_blank" rel="noreferrer noopener">–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a></span>                                                                                         
    </label>
  );
}

function formatRuPhone(input: string): string {
  const digits = input.replace(/\D/g, '').replace(/^8/, '7');
  let out = '+7(';
  if (!digits.startsWith('7')) out = '+7(';
  const d = digits.startsWith('7') ? digits.slice(1) : digits;
  if (d.length > 0) out += d.slice(0, 3);
  if (d.length >= 3) out += ')';
  if (d.length > 3) out += '-' + d.slice(3, 6);
  if (d.length > 6) out += '-' + d.slice(6, 8);
  if (d.length > 8) out += '-' + d.slice(8, 10);
  return out;
}

const PHONE_RE = /^\+7\(\d{3}\)-\d{3}-\d{2}-\d{2}$/;

function Form({ onSubmit, includeConsent = true, submitText }: { onSubmit: (data?: Record<string, unknown>) => void; includeConsent?: boolean; submitText: string; }) {                                                 
  const [busy, setBusy] = useState(false);
  const [success, setSuccess] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (busy) return;
    setBusy(true);
    setErrors({});
    const formData = new FormData(e.currentTarget);
    const data: Record<string, unknown> = {};
    for (const [k, v] of formData.entries()) data[k] = v;

    const newErrors: Record<string, string> = {};
    if (!data.name || String(data.name).trim().length < 2) newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
    if (!data.phone || !PHONE_RE.test(String(data.phone))) newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    if (Object.keys(newErrors).length > 0) { setErrors(newErrors); setBusy(false); return; }

    try {
      const res = await fetch('/api/send-email', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });
      const ok = res.ok;
      setSuccess(ok);
      if (ok) onSubmit(data);
    } catch { setSuccess(false); }
    setBusy(false);
  };

  if (success) return <div className="success-message">–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</div>;
  return (
    <form onSubmit={handleSubmit} noValidate>
      <div className="form-group">
        <input type="text" name="name" placeholder="–í–∞—à–µ –∏–º—è" required aria-invalid={!!errors.name} />
        {errors.name && <span className="error">{errors.name}</span>}
      </div>
      <div className="form-group">
        <input type="tel" name="phone" placeholder="+7(___)___-__-__" required aria-invalid={!!errors.phone} onChange={(e) => { e.target.value = formatRuPhone(e.target.value); }} />
        {errors.phone && <span className="error">{errors.phone}</span>}
      </div>
      {includeConsent && <CheckboxConsent />}
      <button type="submit" className="btn btn-primary" disabled={busy}>{busy ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : submitText}</button>
    </form>
  );
}

function Header({ onOpen }: { onOpen: (id: ModalId) => void; }) {
  return (
    <header className="header">
      <div className="container">
        <div className="header-inner">
          <a href="/" className="logo">
            <span className="logo-mark">V</span>
            <span className="logo-text">–í–∏–∫—Ç–æ—Ä–∏—è</span>
          </a>
          <nav className="nav">
            <a href="#projects">–ü—Ä–æ–µ–∫—Ç—ã</a>
            <a href="#mortgage">–ò–ø–æ—Ç–µ–∫–∞</a>
            <a href="#consult" onClick={(e) => { e.preventDefault(); onOpen('consult'); }}>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</a>
            <a href="tel:+79884707893" className="phone">+7(988)-470-78-93</a>
          </nav>
        </div>
      </div>
    </header>
  );
}

function Hero({ onOpen }: { onOpen: (id: ModalId) => void; }) {
  const [toast, setToast] = useState('');
  const [bookingOpen, setBookingOpen] = useState(false);
  const showToast = (m: string) => { setToast(m); setTimeout(() => setToast(''), 2400); };

  return (
    <section className="hero">
      <div className="container hero-inner">
        <div className="hero-content">
          <h1>–†–∏–µ–ª—Ç–æ—Ä –í–∏–∫—Ç–æ—Ä–∏—è ‚Äì –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h1>
          <p>–û—Ç –¥–µ—Ç—Å–∫–∏—Ö —Å–∞–¥–æ–≤ –∏ —à–∫–æ–ª –¥–æ —Ñ–∏—Ç–Ω–µ—Å–∞ –∏ –ø—Ä–æ–≥—É–ª–æ—á–Ω—ã—Ö –∞–ª–ª–µ–π: –∂–∏–ª—ã–µ –∫–≤–∞—Ä—Ç–∞–ª—ã —Å —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π</p>
          <div className="hero-cta">
            <button className="btn btn-primary" onClick={() => { const next = !bookingOpen; setBookingOpen(next); if (next) { setTimeout(() => document.getElementById('bookingPanel')?.scrollIntoView({ behavior: 'smooth', block: 'center' }), 0); } }}>–°–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã</button>
            <button className="btn btn-secondary" onClick={() => onOpen('consult')}>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</button>
          </div>
          {bookingOpen && (
            <div id="bookingPanel" className="card" style={{ marginTop: 12 }}>
              <h3>–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
              <BookingForm onDone={(ok) => showToast(ok ? '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')} />
            </div>
          )}
          <Toast message={toast} />
        </div>
      </div>
    </section>
  );
}

function Promos() {
  return (
    <section className="promos">
      <div className="container">
        <div className="promo-cards">
          <div className="promo-card">
            <div className="promo-icon">üè†</div>
            <h3>–í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</h3>
            <p>–ò–ø–æ—Ç–µ–∫–∞ –æ—Ç 0,1% –≥–æ–¥–æ–≤—ã—Ö</p>
          </div>
          <div className="promo-card">
            <div className="promo-icon">üéÅ</div>
            <h3>–ü–æ–¥–∞—Ä–∫–∏ –Ω–æ–≤–æ—Å—ë–ª–∞–º</h3>
            <p>–°–∫–∏–¥–∫–∏ –∏ –±–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ</p>
          </div>
          <div className="promo-card">
            <div className="promo-icon">üöÄ</div>
            <h3>–ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ</h3>
            <p>–î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ 1 –¥–µ–Ω—å</p>
          </div>
        </div>
      </div>
    </section>
  );
}

function BookingForm({ onDone }: { onDone: (success: boolean) => void; }) {
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [selectedTime, setSelectedTime] = useState<string>('');
  const [busy, setBusy] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const today = new Date();
  const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
  
  const monthView = useMemo(() => {
    const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
    const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const cells = [];
    const current = new Date(startDate);
    for (let i = 0; i < 42; i++) {
      const dateStr = current.toISOString().split('T')[0];
      const isCurrentMonth = current.getMonth() === today.getMonth();
      const isPast = current < today;
      const isWeekend = current.getDay() === 0 || current.getDay() === 6;
      const isOccupied = Math.random() < 0.3;
      
      cells.push({
        date: dateStr,
        day: current.getDate(),
        isCurrentMonth,
        isPast,
        isWeekend,
        isOccupied
      });
      current.setDate(current.getDate() + 1);
    }
    return { cells, monthName: today.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' }) };
  }, []);

  const times = ['10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00'];

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (busy) return;
    setBusy(true);
    setErrors({});
    const formData = new FormData(e.currentTarget);
    const data: Record<string, unknown> = {};
    for (const [k, v] of formData.entries()) data[k] = v;

    const newErrors: Record<string, string> = {};
    if (!data.name || String(data.name).trim().length < 2) newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
    if (!data.phone || !PHONE_RE.test(String(data.phone))) newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    if (!selectedDate) newErrors.date = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É';
    if (!selectedTime) newErrors.time = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è';
    if (Object.keys(newErrors).length > 0) { setErrors(newErrors); setBusy(false); return; }

    try {
      const res = await fetch('/api/send-email', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ ...data, date: selectedDate, time: selectedTime }) });
      onDone(res.ok);
      if (res.ok) { setSelectedDate(''); setSelectedTime(''); }
    } catch { onDone(false); }
    setBusy(false);
  };

  return (
    <form onSubmit={handleSubmit} noValidate>
      <div style={{ marginBottom: 16 }}>
        <h4 style={{ marginBottom: 8 }}>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</h4>
        <div className="calendar">
          <div className="calendar-header">
            <h5>{monthView.monthName}</h5>
          </div>
          <div className="calendar-weekdays">
            {['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å'].map(w => (<div key={w} style={{ textAlign: 'center' }}>{w}</div>))}
          </div>
          <div className="calendar-grid">
            {monthView.cells.map((c, idx) => (
              <div key={idx} className={`calendar-cell ${!c.isCurrentMonth ? 'other-month' : ''} ${c.isPast ? 'past' : ''} ${c.isWeekend ? 'weekend' : ''} ${c.isOccupied ? 'occupied' : ''} ${selectedDate === c.date ? 'selected' : ''}`} onClick={() => { if (c.isCurrentMonth && !c.isPast && !c.isOccupied) setSelectedDate(c.date); }}>
                {c.day}
              </div>
            ))}
          </div>
        </div>
        {errors.date && <span className="error">{errors.date}</span>}
      </div>
      
      <div style={{ marginBottom: 16 }}>
        <h4 style={{ marginBottom: 8 }}>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:</h4>
        <div className="time-grid">
          {times.map(t => (
            <button key={t} type="button" className={`time-slot ${selectedTime === t ? 'selected' : ''}`} onClick={() => setSelectedTime(t)} disabled={selectedDate && Math.random() < 0.4}>
              {t}
            </button>
          ))}
        </div>
        {errors.time && <span className="error">{errors.time}</span>}
      </div>

      <div className="form-group">
        <input type="text" name="name" placeholder="–í–∞—à–µ –∏–º—è" required aria-invalid={!!errors.name} />
        {errors.name && <span className="error">{errors.name}</span>}
      </div>
      <div className="form-group">
        <input type="tel" name="phone" placeholder="+7(___)___-__-__" required aria-invalid={!!errors.phone} onChange={(e) => { e.target.value = formatRuPhone(e.target.value); }} />
        {errors.phone && <span className="error">{errors.phone}</span>}
      </div>
      <CheckboxConsent />
      <button type="submit" className="btn btn-primary" disabled={busy}>{busy ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä'}</button>
    </form>
  );
}

function Projects() {
  return (
    <section id="projects" className="section projects">
      <div className="container">
        <div className="section-head">
          <h2>–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É</h2>
        </div>
        <div className="cards grid-3">
           <article className="project-card">
             <img src="/img/dom-101.jpg.webp" alt="–î–û–ú 101" style={{ width: '100%', height: '200px', objectFit: 'cover', borderRadius: '10px', marginBottom: '12px' }} />                                       
             <div className="project-meta">
               <span className="pill">–°—Ç–∞—Ä—Ç –ø—Ä–æ–¥–∞–∂</span>
               <span className="pill pill-sale">‚Äë12%</span>
               <span className="pill pill-available">–≤ –ø—Ä–æ–¥–∞–∂–µ</span>
             </div>
             <h3>–î–û–ú 101</h3>
             <p className="project-location">–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª–∏—Ü–∞ –î–æ—Ä–æ–∂–Ω–∞—è</p>
             <ul className="project-prices">
               <li><strong>–°—Ç—É–¥–∏–∏</strong> ‚Äî –æ—Ç 3,0 –º–ª–Ω ‚ÇΩ</li>
               <li><strong>1‚Äë–∫</strong> ‚Äî –æ—Ç 4,7 –º–ª–Ω ‚ÇΩ</li>
               <li><strong>3‚Äë–∫</strong> ‚Äî –æ—Ç 7,9 –º–ª–Ω ‚ÇΩ</li>
             </ul>
             <a className="btn btn-secondary" href="#catalog">–û –ø—Ä–æ–µ–∫—Ç–µ</a>
           </article>
           <article className="project-card">
             <img src="/img/narodnye-kvartaly.jpg.webp" alt="–ù–∞—Ä–æ–¥–Ω—ã–µ –∫–≤–∞—Ä—Ç–∞–ª—ã" style={{ width: '100%', height: '200px', objectFit: 'cover', borderRadius: '10px', marginBottom: '12px' }} />                                       
             <div className="project-meta">
               <span className="pill">–°—Ç–∞—Ä—Ç –ø—Ä–æ–¥–∞–∂</span>
               <span className="pill pill-sale">‚Äë8%</span>
               <span className="pill pill-available">–≤ –ø—Ä–æ–¥–∞–∂–µ</span>
             </div>
             <h3>–ù–∞—Ä–æ–¥–Ω—ã–µ –∫–≤–∞—Ä—Ç–∞–ª—ã</h3>
             <p className="project-location">–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª–∏—Ü–∞ –ù–∞—Ä–æ–¥–Ω–∞—è</p>
             <ul className="project-prices">
               <li><strong>1‚Äë–∫</strong> ‚Äî –æ—Ç 4,2 –º–ª–Ω ‚ÇΩ</li>
               <li><strong>2‚Äë–∫</strong> ‚Äî –æ—Ç 5,8 –º–ª–Ω ‚ÇΩ</li>
               <li><strong>3‚Äë–∫</strong> ‚Äî –æ—Ç 7,5 –º–ª–Ω ‚ÇΩ</li>
             </ul>
             <a className="btn btn-secondary" href="#catalog">–û –ø—Ä–æ–µ–∫—Ç–µ</a>
           </article>
           <article className="project-card">
             <img src="/img/istoriya-2.jpg.webp" alt="–ò—Å—Ç–æ—Ä–∏—è 2" style={{ width: '100%', height: '200px', objectFit: 'cover', borderRadius: '10px', marginBottom: '12px' }} />                                       
             <div className="project-meta">
               <span className="pill">–°–∫–æ—Ä–æ –≤ –ø—Ä–æ–¥–∞–∂–µ</span>
               <span className="pill pill-sale">‚Äë15%</span>
               <span className="pill pill-available">–ø—Ä–µ–¥–∑–∞–∫–∞–∑</span>
             </div>
             <h3>–ò—Å—Ç–æ—Ä–∏—è 2</h3>
             <p className="project-location">–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª–∏—Ü–∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è</p>
             <ul className="project-prices">
               <li><strong>–°—Ç—É–¥–∏–∏</strong> ‚Äî –æ—Ç 2,8 –º–ª–Ω ‚ÇΩ</li>
               <li><strong>1‚Äë–∫</strong> ‚Äî –æ—Ç 4,0 –º–ª–Ω ‚ÇΩ</li>
               <li><strong>2‚Äë–∫</strong> ‚Äî –æ—Ç 5,5 –º–ª–Ω ‚ÇΩ</li>
             </ul>
             <a className="btn btn-secondary" href="#catalog">–û –ø—Ä–æ–µ–∫—Ç–µ</a>
           </article>
        </div>
      </div>
    </section>
  );
}

function Mortgage({ onOpen }: { onOpen: (id: ModalId) => void; }) {
  return (
    <section id="mortgage" className="section mortgage">
      <div className="container">
        <div className="mortgage-content">
          <div className="mortgage-info">
            <h2>–ò–ø–æ—Ç–µ—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã</h2>
            <p>–í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏–ø–æ—Ç–µ–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</p>
            <ul className="mortgage-features">
              <li>–°—Ç–∞–≤–∫–∞ –æ—Ç 0,1% –≥–æ–¥–æ–≤—ã—Ö</li>
              <li>–ë–µ–∑ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞</li>
              <li>–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å</li>
              <li>–î–æ 30 –ª–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è</li>
            </ul>
            <button className="btn btn-primary" onClick={() => onOpen('consult')}>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</button>
          </div>
          <div className="mortgage-calculator">
            <h3>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–ø–æ—Ç–µ–∫–∏</h3>
            <Form onSubmit={() => onOpen('consult')} submitText="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É" />
          </div>
        </div>
      </div>
    </section>
  );
}

function CTA({ onOpen }: { onOpen: (id: ModalId) => void; }) {
  return (
    <section className="cta">
      <div className="container">
        <div className="cta-content">
          <h2>–ì–æ—Ç–æ–≤—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–π –¥–æ–º?</h2>
          <p>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</p>
          <div className="cta-buttons">
            <button className="btn btn-primary" onClick={() => onOpen('consult')}>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</button>
            <a href="tel:+79884707893" className="btn btn-secondary">–ü–æ–∑–≤–æ–Ω–∏—Ç—å: +7(988)-470-78-93</a>
          </div>
        </div>
      </div>
    </section>
  );
}

function Footer() {
  return (
    <footer className="footer">
      <div className="container">
        <div className="footer-content">
          <div className="footer-section">
            <div className="logo">
              <span className="logo-mark">V</span>
              <span className="logo-text">–í–∏–∫—Ç–æ—Ä–∏—è</span>
            </div>
            <p>–í–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</p>
          </div>
          <div className="footer-section">
            <h4>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
            <p>–¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:+79884707893">+7(988)-470-78-93</a></p>
            <p>Email: <a href="mailto:info@victory-realty.ru">info@victory-realty.ru</a></p>
          </div>
          <div className="footer-section">
            <h4>–ù–∞–≤–∏–≥–∞—Ü–∏—è</h4>
            <nav>
              <a href="#projects">–ü—Ä–æ–µ–∫—Ç—ã</a>
              <a href="#mortgage">–ò–ø–æ—Ç–µ–∫–∞</a>
              <a href="/policy.html">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
            </nav>
          </div>
        </div>
        <div className="footer-bottom">
          <p>&copy; 2024 –í–∏–∫—Ç–æ—Ä–∏—è. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </div>
    </footer>
  );
}

function Modal({ open, onClose, children }: { open: boolean; onClose: () => void; children: React.ReactNode; }) {
  if (!open) return null;
  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal" onClick={(e) => e.stopPropagation()}>
        <button className="modal-close" onClick={onClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
        {children}
      </div>
    </div>
  );
}

export default function App() {
  const { open, openModal, close } = useModal();

  return (
    <div className="app">
      <Header onOpen={openModal} />
      <main>
        <Hero onOpen={openModal} />
        <Promos />
        <Projects />
        <Mortgage onOpen={openModal} />
        <CTA onOpen={openModal} />
      </main>
      <Footer />
      
      <Modal open={open === 'consult'} onClose={close}>
        <div className="modal-content">
          <h3>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</h3>
          <Form onSubmit={() => { close(); }} submitText="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É" />
        </div>
      </Modal>
      
      <Modal open={open === 'callback'} onClose={close}>
        <div className="modal-content">
          <h3>–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫</h3>
          <Form onSubmit={() => { close(); }} submitText="–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫" />
        </div>
      </Modal>
    </div>
  );
}
